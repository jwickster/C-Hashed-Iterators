
#include <iostream>
#include <map>
#include <list>
#include <algorithm>
//To prevent those using g++ from trying to use a library
#ifndef __GNUC__
#include <conio.h>
#else
#include <stdio.h>
#endif

#include <sstream>

//forward declarations 
template <typename T> class hashTable;

using namespace std;

//************************************************************************
//A class I designed to help keep track of how much memory you allocate
//************************************************************************
class manageMemory {
public:

	static std::size_t getTotalSize() {
		std::size_t total = 0;
		std::map<void *, std::size_t>::iterator iter;
		for (iter = mapOfAllocations.begin(); iter != mapOfAllocations.end(); ++iter) {
			total += iter->second;
		}
		return total;
	}

	//I overloaded the new and delete keywords so I could manually track allocated memory.
	void* operator new(std::size_t x) {
		void *ptr = ::operator new(x);
		mapOfAllocations[ptr] = x;
		return ptr;
	}
	void* operator new[](std::size_t x) {
		void *ptr = ::operator new[](x);
		mapOfAllocations[ptr] = x;
		return ptr;
	}
		void operator delete(void* x) {
		mapOfAllocations.erase(x);
		::operator delete(x);
	}
	void operator delete[](void* x) {
		mapOfAllocations.erase(x);
		::operator delete[](x);
	}
private:
	static std::map<void *, std::size_t> mapOfAllocations;
};
std::map<void *, std::size_t> manageMemory::mapOfAllocations;


//************************************************************************************
//A quick and simple class that simulates a product object.
//************************************************************************************
class product {
public:
	void setCost(int cost);
	void setName(const string&);
	string getName();
	int getCost();
	string getAllInfo();
private:
	string name;
	int cost;
};
void product::setCost(int cost) {
	this->cost = cost;
}
void product::setName(const string& name) {
	this->name = name;
}
string product::getName() {
	return name;
}
int product::getCost() {
	return cost;
}
string product::getAllInfo() {
	stringstream ss;
	ss << "Name: " << name << ", Cost: " << cost;
	return ss.str();
}


//****************************
//The keyvalue pair
//****************************
template <typename T>
class keyValuePair {
public:
	keyValuePair(const string& key, const T& value) : key(key), value(value) {}
	string key;
	T value;
};


//****************************
//The HashIterator class
//****************************
template <typename T>
class hashIterator : public manageMemory {
	friend class hashTable<T>;  //This is friended so the hashTable class can access 
								//our three private data members in hashTable's begin() and end() method.
public:
	//TODO, complete your operator!=, your operator*, and your operator++ methods.
	
	bool operator !=(const hashIterator& other) {
		if (currentLinkedList != other.currentLinkedList)
			return true;
		if(listIterator != other.listIterator)
			return true;
		return false;
	}

	T operator *() {
		return listIterator->value;
	}

	void operator ++() {
		++listIterator;
		if (listIterator != arr[currentLinkedList].end())
			return;
		currentLinkedList++;
		while (currentLinkedList < 1000)
		{
			if (arr[currentLinkedList].size() > 0)
				break;
			currentLinkedList++;
		}
		if(currentLinkedList<1000)
			listIterator = arr[currentLinkedList].begin();
		else
		{
			listIterator = arr[999].end();
			currentLinkedList = 999;

		}
	}
private:
	//The HashIterator needs to know about three things.
	//#1, the array of linked lists (arr)
	//#2, which linked list in the array it is currently on (currentLinkedList)
	//#3, the iterator for that specific linked list (listIterator)
	std::list< keyValuePair<T> > * arr;
	int currentLinkedList;
	typename std::list< keyValuePair<T> >::const_iterator listIterator;
};

//******************
//The hashtable class
//******************
template <typename T>
class hashTable : public manageMemory
{
private:
	int hash(const string& key) const;//array inside hash table class.private because 
	list< keyValuePair<T> > arr[1000];
public:
	unsigned int getTotalCount() const;
	unsigned int getWorstClump() const;
	void add(const string& key, const T& value);
	T item(const string& key) const;
	T& operator[](const string& key);
	bool exists(const string& key) const;
	void remove(const string& key);
	//TODO add a begin and end method
	hashIterator<T> begin();
	hashIterator<T> end();

};// end class hashTable


template <typename T>
int hashTable<T>::hash(const string& key) const {
	//Your hash algorithm.  It already mods by 1000 for you.  Do not modify
	int temp = 0;
	for (int i = key.length(); i >= 0; i--) {
		temp = (13 * temp + key[i]) % 1000;
	}
	return temp;
}

template <typename T>
unsigned int hashTable<T>::getTotalCount() const {
	//Adds up the amount of items total in the hashTable.  Do not modify
	unsigned int count = 0;
	for (int i = 0; i < 1000; i++) {
		count += arr[i].size();
	}
	return count;
}

template <typename T>
unsigned int hashTable<T>::getWorstClump() const {
	//Finds the bucket with the worst clump in the hashTable.  Do not modify
	unsigned int count = 0;
	for (int i = 0; i < 1000; i++) {
		if (arr[i].size() > count) {
			count = arr[i].size();
		}
	}
	return count;
}



template <typename T>
void hashTable<T>::add(const string& key, const T& value) {
	//hash the key
	//mod by the number of buckets (it already does)
	//go to that bucket
	//call that linked list object's push_back.  
	arr[hash(key)].push_back(keyValuePair<T>(key, value));
}

template <typename T>
T hashTable<T>::item(const string& key) const
{
	for (auto& kv : arr[hash(key)]) {
		if (kv.key == key) {
			return kv.value;
		}
	}
	throw 1;

}

template <typename T>
T& hashTable<T>::operator[](const string& key) {
	//TODO
	unsigned int index = hash(key);
	for (auto& kv : arr[index]) {
		if (kv.key == key) {
			return kv.value;
		}
	}

	//This is only to make it compile.  
//	T temp;
	//return temp;
}


template <typename T>
bool hashTable<T>::exists(const string& key) const
{
	unsigned int index = hash(key);
	for (auto& kv : arr[index]) {
		if (kv.key == key) {
			return true;
		}
	}
	//TODO
	return false;
}


template <typename T>
void hashTable<T>::remove(const string& key) {

	//This gets the specific linked list without making a copy of it.  
	auto& thisList = arr[hash(key)];
	unsigned int index = hash(key);
	for (auto kv = arr[index].begin(); kv != arr[index].end(); kv++) {
		if ((*kv).key == key) {
			thisList.erase(kv);
			return;
		}

	}
}

template <typename T>
hashIterator<T> hashTable<T>::begin() {
	hashIterator<T> hashIt;
	hashIt.currentLinkedList = 1000;
	for (int i = 0; i < 1000; i++) {
		if (arr[i].size() > 0) {
			hashIt.currentLinkedList = i;
			hashIt.arr = arr ;
			break;
		}
	}
	if(hashIt.currentLinkedList < 1000)
		hashIt.listIterator = arr[hashIt.currentLinkedList].begin();
	else
	{
		hashIt.currentLinkedList = 999;
		hashIt.listIterator = arr[999].end();
	}
	
	// return the hash iterator object
	return hashIt;
	//TODO
}

template <typename T>
hashIterator<T> hashTable<T>::end() {
	//TODO
	hashIterator<T> hashIt;
	hashIt.arr = arr;
	hashIt.currentLinkedList =999;
	hashIt.listIterator = arr[hashIt.currentLinkedList].end();
	return hashIt;
}
//This helps with testing, do not modify.
template <typename T>
string NumberToString(T Number)
{
	ostringstream ss;
	ss << Number;
	return ss.str();
}

//This helps with testing, do not modify.
bool checkEmpty(string testName, string whatItIs) {

	if (whatItIs != "") {
		cout << "Passed " << testName << ", the data was " << whatItIs << endl;
		return true;
	}
	else {
		cout << "***Failed test " << testName << " *** " << endl << "   No data was found! " << endl;
		return false;
	}
}

//This helps with testing, do not modify.
bool checkTest(string testName, string whatItShouldBe, string whatItIs) {

	if (whatItShouldBe == whatItIs) {
		cout << "Passed " << testName << endl;
		return true;
	}
	else if (whatItShouldBe == "") {
		cout << "****** Failed test " << testName << " ****** " << endl << "     Output was '" << whatItIs << endl << "'     Output should have been blank" << endl;
		return false;

	}
	else {
		cout << "****** Failed test " << testName << " ****** " << endl << "     Output was " << whatItIs << endl << "     Output should have been " << whatItShouldBe << endl;
		return false;
	}
}

//This helps with testing, do not modify.
bool checkTest(string testName, int whatItShouldBe, int whatItIs) {

	if (whatItShouldBe == whatItIs) {
		cout << "Passed " << testName << endl;
		return true;
	}
	else {
		cout << "****** Failed test " << testName << " ****** " << endl << "     Output was " << whatItIs << endl << "     Output should have been " << whatItShouldBe << endl;
		return false;
	}
}

//This helps with testing, do not modify.
bool checkTestMemory(string testName, int whatItShouldBe, int whatItIs) {

	if (whatItShouldBe == whatItIs) {
		cout << "Passed " << testName << endl;
		return true;
	}
	else {
		cout << "***Failed test " << testName << " *** " << endl << "  There are " << whatItIs << " bytes of memory yet to be reclaimed!" << endl;
		return false;
	}
}


//This helps with testing, do not modify.
void testSimpleIntHash() {

	hashTable<string> myHash;

	//Test #1, add "Jazz" into our hash with a key of 6.  Try to retrieve it.  
	myHash.add("6", "Jazz");
	checkTest("testSimpleIntHash #1", "Jazz", myHash.item("6"));

	//Test #2, attempt to get the Jazz using the operator[] code.
	checkTest("testSimpleIntHash #2", "Jazz", myHash["6"]);

	//Test #3, attempt to change the value at this location:
	myHash["6"] = "Nuggets";

	checkTest("testSimpleIntHash #3", "Nuggets", myHash["6"]);

	//Test #4, 
	//See if we can find it
	if (myHash.exists("6")) {
		checkTest("testSimpleIntHash #4", "", "");
	}
	else {
		checkTest("testSimpleIntHash #4", "This test should have found an item with key \"6\"", "This test did NOT find an item with key \"6\"");
	}

	//Test #5, see if we can find something that doesn't exist yet.
	if (myHash.exists("1234")) {
		checkTest("testSimpleIntHash #5", "This test should NOT have found an item with key \"1234\".", "This test found an item with key \"1234\"");
	}
	else {
		checkTest("testSimpleIntHash #5", "", "");
	}

	//Test #6, removing it from the hash
	myHash.remove("6");
	if (myHash.exists("6")) {
		checkTest("testSimpleIntHash #6", "This test should NOT have found an item with key \"6\".", "This test found an item with key \"6\"");
	}
	else {
		checkTest("testSimpleIntHash #6", "", "");
	}

	//Add more into the hash
	myHash.add("13", "Lakers");
	myHash.add("25", "Bulls");
	myHash.add("101", "Pelicans");
	myHash.add("77", "Bucks");
	myHash.add("12", "Thunder");
	myHash.add("42", "Nets");
	myHash.add("97", "Timberwolves");
	myHash.add("123", "Hornets");
	myHash.add("500", "Mavericks");

	//Attempt to retrieve some
	checkTest("testSimpleIntHash #7", "Thunder", myHash.item("12"));
	checkTest("testSimpleIntHash #8", "Bucks", myHash.item("77"));
	checkTest("testSimpleIntHash #9", "Hornets", myHash.item("123"));

	//Now count up how many are in there
	checkTest("testSimpleIntHash #10", 9, myHash.getTotalCount());

	//Now just verify that they aren't clumping up badly.
	int worst = 0;
	worst = myHash.getWorstClump();
	if (worst > 4) {
		cout << "Failed testSimpleIntHash #11!  There exists a clump of " << worst << " consecutive items, it shouldn't be worse than 4." << endl;
	}
	else {
		cout << "Passed testSimpleIntHash #11.  Your worst clump was " << worst << " items." << endl;
	}

	//Now go crazy and throw in 1000 more items.
	int key = 0;
	stringstream out;
	for (int i = 0; i < 1000; i++) {

		//this next part just helps create some variation in generated W#s...
		if (i % 2 == 0) {
			key += 17;
		}
		else if (i % 3 == 0) {
			key += 23;
		}
		else if (i % 5 == 0) {
			key += 51;
		}
		else if (i % 7 == 0) {
			key += 13;
		}
		else {
			key += 71;
		}
		//convert an int to a string via help from the stringstream class
		out.str("");
		out << key;
		string temp = out.str();

		myHash.add(temp, "a"); //Just add a bunch of letter a's
	}

	//Make sure they all go in there.  We put in 9 manually, then we added in 1000 more.  
	checkTest("testSimpleIntHash #12", 1009, myHash.getTotalCount());

	worst = myHash.getWorstClump();
	if (worst > 10) {
		cout << "Failed testSimpleIntHash #13!  There exists a clump of " << worst << " consecutive items, it shouldn't be worse than 10." << endl;
	}
	else {
		cout << "Passed testSimpleIntHash #13.  Your worst clump was " << worst << " items." << endl;
	}

}


void testHashOfObjects() {


	hashTable<product> myHash;

	//Test #1, add in a studentObject.  Try to retrive it.  
	product tempProduct;
	tempProduct.setCost(5);
	tempProduct.setName("Silly string");
	myHash.add("12341-51231", tempProduct);
	checkTest("testHashOfObjects #1", "Silly string", myHash.item("12341-51231").getName());

	//Test #2, attempt to get the product using its ID code
	checkTest("testHashOfObjects #2", "Silly string", myHash["12341-51231"].getName());

	//Test #3, see what happens if two products have the same ID code.  This should overwrite the former.
	tempProduct.setCost(18);
	tempProduct.setName("Novelty foam hat");
	myHash["12341-51231"] = tempProduct;
	checkTest("testHashOfObjects #3", "Novelty foam hat", myHash["12341-51231"].getName());

	//Test #4, 
	//See if we can find it
	if (myHash.exists("12341-51231")) {
		checkTest("testHashOfObjects #4", "", "");
	}
	else {
		checkTest("testHashOfObjects #4", "This test should have found an item with key 12341-51231", "This test did NOT find an item with key 12341-51231");
	}

	//Test #5, see if we can find something that doesn't exist yet.
	if (myHash.exists("56756-75675")) {
		checkTest("testHashOfObjects #5", "This test should NOT have found an item with key 56756-75675.", "This test found an item with key56756-75675");
	}
	else {
		checkTest("testHashOfObjects #5", "", "");
	}

	//Test #6, removing it from the hash
	myHash.remove("12341-51231");
	if (myHash.exists("12341-51231")) {
		checkTest("testHashOfObjects #6", "This test should NOT have found an item with key 12341-51231.", "This test found an item with key 12341-51231");
	}
	else {
		checkTest("testHashOfObjects #6", "", "");
	}



	//Now throw in 1000 more items.
	int value = 0;
	string key;
	stringstream out;
	for (int i = 0; i < 1000; i++) {
		//this next part just helps create some variation for our produce ID codes.
		if (i % 2 == 0) {
			value += 107;
		}
		else if (i % 3 == 0) {
			value += 83;
		}
		else if (i % 5 == 0) {
			value += 47;
		}
		else if (i % 7 == 0) {
			value += 131;
		}
		else {
			value += 53;
		}
		key = "12345-";
		out.str("");
		if (value < 10000)
			key = key + "0";
		if (value < 1000)
			key = key + "0";
		if (value < 100)
			key = key + "0";
		if (value < 10)
			key = key + "0";
		out << value;
		string temp = out.str();
		if (temp.length() > 5) {
			temp = temp.substr(0, 5);
		}
		key = key + temp;
		//Whew, that took a while, but the W# is in key, and is ready to go

		//Create the student record, and load in values.
		tempProduct.setName("Acme product");
		tempProduct.setCost(rand() % 41);

		//Testing the hash table "add" method
		myHash.add(key, tempProduct);
	}

	//Make sure one went in correctly.  Retrieve it.
	checkEmpty("testHashOfObjects #7", myHash["12345-02112"].getAllInfo());

	//Make sure they all go in there.
	checkTest("testHashOfObjects #8", 1000, myHash.getTotalCount());

	//Now test how good your int hash function is.  
	int worst = myHash.getWorstClump();
	if (worst > 15) {
		cout << "Failed testSimpleIntHash #9!  There exists a clump of " << worst << " consecutive items, it shouldn't be worse than 15." << endl;
	}
	else {
		cout << "Passed testSimpleIntHash #9.  Your worst clump was " << worst << " items." << endl;
	}

}


//This helps with testing, do not modify.
void testHashIteratorIncrement() {

	cout << "**** REMINDER ****: You will need to uncomment the testHashIteratorIncrement tests" << endl;

	
	hashTable<int> h;

	//Our test data should have all even numbers from 200, 291, 382, 473,
	for (int i = 200; i <= 1000; i += 91) {
	h.add(NumberToString(i), i);
	}

	//Get an iterator which points at the beginning of the list
	hashIterator<int> iter = h.begin();

	//Test that it does point to the first
	checkTest("testHashIteratorsIncrement #1", 837, *iter);

	//Test that our ListIterator can move forward;
	++iter;

	checkTest("testHashIteratorsIncrement #2", 291, *iter);

	//move it some more
	for (int i = 0; i < 6; i++) {
	++iter;
	}
	checkTest("testHashIteratorsIncrement #3", 200, *iter);

	//Hit the end
	++iter;
	checkTest("testHashIteratorsIncrement #4", 746, *iter);
	

}

//This helps with testing, do not modify.
void testHashIteration() {

	cout << "**** REMINDER ****: You will need to uncomment the testHashIteration tests" << endl;

	

	hashTable<int> h;

	//Our test data should have all even numbers from 2 to 20
	for (int i = 2; i <= 20; i += 2) {
	h.add(NumberToString(i), i);
	}
	stringstream ss;

	cout << "testHashIteration test #1, this should display 2 4 6 8 10 20 12 14 16 18." << endl;
	for (auto i : h) {
	cout << i << " ";
	ss << i << " ";
	}
	cout << endl;
	checkTest("testHashIteration #1", "2 4 6 8 10 20 12 14 16 18 ", ss.str());

	ss.clear();
	ss.str("");
	hashTable<int> myHashOneNode;
	int i = 42;
	myHashOneNode.add("answer", i);
	cout << "testHashIteration test #2, the next line should display 42" << endl;
	//see if we can just iterator through one item.
	for (auto i : myHashOneNode) {
	cout << i << " ";
	ss << i << " ";
	}
	cout << endl;
	checkTest("testHashIteration #2", "42 ", ss.str());

	ss.clear();
	ss.str("");
	hashTable<int> myHashEmpty;
	cout << "testHashIteration test #3, the next line shouldn't display anything" << endl;
	//see if we can just iterator through one item.
	for (auto i : myHashEmpty) {
	cout << i << " ";
	ss << i << " ";
	}
	cout << endl;
	checkTest("testHashIteration #3", "", ss.str());
	

}

//This helps with testing, do not modify.
void testHashofHashes() {

	cout << "**** REMINDER ****: You will need to uncomment the testHashofHashes tests" << endl;


	
	//A rather complicated declaration, but it works!
	hashTable< hashTable<int> > studentAssignments;
	hashTable<int> tempHash1;
	studentAssignments.add("Alice", tempHash1);

	hashTable<int> tempHash2;
	studentAssignments.add("Bob", tempHash2);

	hashTable<int> tempHash3;
	studentAssignments.add("Karl", tempHash3);

	//Give alice some assignment scores
	studentAssignments["Alice"].add("1", 73);
	studentAssignments["Alice"].add("2", 65);
	studentAssignments["Alice"].add("4", 91);
	//Ensure it went in
	checkTest("testHashofHashes #1", 65, studentAssignments["Alice"]["2"]);

	//And Bob
	studentAssignments["Bob"].add("1", 90);
	studentAssignments["Bob"].add("3", 84);
	studentAssignments["Bob"].add("4", 99);

	//And Karl
	studentAssignments["Karl"].add("1", 92);
	studentAssignments["Karl"].add("2", 92);
	studentAssignments["Karl"].add("3", 87);
	studentAssignments["Karl"].add("4", 10);

	//Now find the average of assignment 4 scores
	int average = (studentAssignments["Alice"]["4"] + studentAssignments["Bob"]["4"] + studentAssignments["Karl"]["4"]) / 3;
	checkTest("testHashofHashes #2", 66, average);

	int scores = 0;
	for (auto student : studentAssignments) {
	for (auto score : student) {
	scores += score;
	cout << score << " ";
	}
	}
	cout << endl;
	if (scores != 783) {
	cout << "Failed testHashofHashes #3!  Tried iterating and counting all the scores of all values.  Got " << scores << " instead of 783" << endl;
	}
	else {
	cout << "Passed testHashofHashes #3." << endl;
	}
	
}

void pressAnyKeyToContinue() {
	cout << "Press any key to continue...";

	//Linux and Mac users with g++ don't need this
	//But everyone else will see this message.
#ifndef __GNUC__
	_getch();

#else
	int c;
	fflush(stdout);
	do c = getchar(); while ((c != '\n') && (c != EOF));
#endif
	cout << endl;
}

int main() {

	pressAnyKeyToContinue();
	testSimpleIntHash();
	checkTestMemory("Memory Leak/Allocation Test #1", 0, manageMemory::getTotalSize());

	pressAnyKeyToContinue();
	testHashOfObjects();
	checkTestMemory("Memory Leak/Allocation Test #2", 0, manageMemory::getTotalSize());

	testHashIteratorIncrement();
	checkTestMemory("Memory Leak/Allocation Test #3", 0, manageMemory::getTotalSize());
	pressAnyKeyToContinue();

	cout << "Reminder: You will need to uncomment the testHashIteration test in main()" << endl;
	testHashIteration();
	checkTestMemory("Memory Leak/Allocation Test #4", 0, manageMemory::getTotalSize());
	pressAnyKeyToContinue();

	cout << "Reminder: You will need to uncomment the testHashofHashes test in main()" << endl;
	testHashofHashes();
	checkTestMemory("Memory Leak/Allocation Test #5", 0, manageMemory::getTotalSize());
	pressAnyKeyToContinue();



	return 0;
}
